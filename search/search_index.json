{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":""},{"location":"#lance-namespace-specification","title":"Lance Namespace Specification","text":"<p>Lance Namespace Specification is an open specification on top of the storage-based Lance data format to standardize access to a collection of Lance tables (a.k.a. Lance datasets). It describes how a metadata service like Apache Hive MetaStore (HMS), Apache Iceberg REST Catalog (IRC), Apache Gravitino, Unity Catalog, etc. should store and use Lance tables,  as well as how ML/AI tools and analytics compute engines should integrate with Lance tables.</p>"},{"location":"#why-namespace-not-catalog","title":"Why Namespace not Catalog?","text":"<p>There are many terms used to describe the concept of a container in database systems \u2014 such as namespace, catalog, schema, database, metastore, and metalake.  Among these, namespace and catalog have become the most prominent in modern lakehouse architectures.</p> <p>The term catalog typically implies a hierarchical structure with at least two levels.  For example, Apache Hive uses a catalog \u2192 database \u2192 table model,  while Apache Iceberg\u2019s REST catalog adopts a catalog \u2192 multi-level namespace \u2192 table hierarchy.</p> <p>In contrast, the ML and AI communities tend to favor a flatter organizational model.  It\u2019s common to store datasets in simple directories  and categorize them using flexible systems like tagging, rather than rigid hierarchies.</p> <p>To better support this usage pattern, Lance adopts the term namespace to represent all container concepts  \u2014 including what would traditionally be called a catalog.  With the Lance Namespace Specification, we provide a flexible, multi-level namespace abstraction  that allows users to structure and manage Lance datasets in ways that best align with their data organization strategies.</p>"},{"location":"contributing/","title":"Contributing","text":""},{"location":"contributing/#lance-contributing-guide","title":"Lance Contributing Guide","text":"<p>This is a sub-project of the Lance project.  Please read its contributing guide first. </p>"},{"location":"contributing/#repository-structure","title":"Repository structure","text":"Component Language Path Description spec docs/src/spec Lance Namespace Specification Rust Reqwest Client Rust rust/lance-namespace-reqwest-client Generated Rust reqwest client for Lance REST Namespace Python UrlLib3 Client Python python/lance_namespace_urllib3_client Generated Python urllib3 client for Lance REST Namespace Java Apache Client Java java/lance-namespace-apache-client Generated Java Apache HTTP client for Lance REST Namespace Java Springboot Server Java java/lance-namespace-springboot-server Generated Java SpringBoot server for Lance REST Namespace Java Lance Namespace Core Java java/lance-namespace-core Lance Namespace Java Core SDK Java Lance Namespace Adapter Java java/lance-namespace-adaptor Lance Namespace adapter server implementation"},{"location":"contributing/#install-openapi-generator","title":"Install OpenAPI Generator","text":"<p>We use OpenAPI Generator to generate various clients and servers for the namespace specification. We recommend installing the tool through pip for consistent experience across platforms. First time setup of virtual environment and installation:</p> <pre><code>python3 -m venv .env\nsource .env/bin/activate\npip install -r requirements.txt\n</code></pre>"},{"location":"contributing/#install-poetry-for-python","title":"Install Poetry for Python","text":"<p>If you want to build the entire project, or develop python specifically, you need to install poetry. To quickly install it in your virtual environment:</p> <pre><code>pip install -r python/requirements.txt\n</code></pre>"},{"location":"contributing/#lint","title":"Lint","text":"<p>To ensure the OpenAPI definition is valid, you can use the lint command to check it.</p> <pre><code>make lint\n</code></pre>"},{"location":"contributing/#build","title":"Build","text":"<p>There are 3 commands that is available at top level as well as inside each language folder:</p> <ul> <li><code>make clean</code>: remove all codegen modules</li> <li><code>make gen</code>: codegen and lint all modules (depends on <code>clean</code>)</li> <li><code>make build</code>: build all modules (depends on <code>gen</code>)</li> </ul> <p>You can also run <code>make &lt;command&gt;-&lt;language&gt;</code> to only run the command in the specific language, for example:</p> <ul> <li><code>make gen-python</code>: codegen and lint all Python modules</li> <li><code>make build-rust</code>: build all Rust modules</li> </ul> <p>You can also run <code>make &lt;command&gt;-&lt;language&gt;-&lt;module&gt;</code> inside a language folder to run the command against a specific module, for example:</p> <ul> <li><code>make gen-rust-reqwest-client</code>: codegen and lint the Rust reqwest client module</li> <li><code>make build-java-springboot-server</code>: build the Java Spring Boot server module</li> </ul>"},{"location":"spec/concepts/","title":"Namespace Concepts","text":""},{"location":"spec/concepts/#namespace-definition","title":"Namespace Definition","text":"<p>A Lance namespace is a centralized repository for discovering, organizing, and managing Lance tables. It can either contain a collection of tables, or a collection of Lance namespaces recursively. It is designed to encapsulates concepts including namespace, metastore, database, schema, etc. that frequently appear in other similar data systems to allow easy integration with any system of any type of object hierarchy.</p> <p>Here is an example layout of a Lance namespace:</p> <p></p>"},{"location":"spec/concepts/#parent-child","title":"Parent &amp; Child","text":"<p>We use the term parent and child to describe relationship between 2 objects. If namespace A directly contains B, then A is the parent namespace of B, i.e. B is a child of A. For examples:</p> <ul> <li>Namespace <code>ns1</code> contains a child namespace <code>ns4</code>. i.e. <code>ns1</code> is the parent namespace of <code>ns4</code>.</li> <li>Namespace <code>ns2</code> contains a child table <code>t2</code>, i.e. <code>t2</code> belongs to parent namespace <code>ns2</code>.</li> </ul>"},{"location":"spec/concepts/#root-namespace","title":"Root Namespace","text":"<p>A root namespace is a namespace that has no parent. The root namespace is assumed to always exist and is ready to be connected to by a tool to explore objects in the namespace. The lifecycle management (e.g. creation, deletion) of the root namespace is out of scope of this specification.</p>"},{"location":"spec/concepts/#object-name","title":"Object Name","text":"<p>The name of an object is a string that uniquely identifies the object within the parent namespace it belongs to. The name of any object must be unique among all other objects that share the same parent namespace. For examples:</p> <ul> <li><code>cat2</code>, <code>cat3</code> and <code>cat4</code> are all unique names under the root namespace</li> <li><code>t3</code> and <code>t4</code> are both unique names under <code>cat4</code></li> </ul>"},{"location":"spec/concepts/#object-identifier","title":"Object Identifier","text":"<p>The identifier of an object uniquely identifies the object within the root namespace it belongs to. The identifier of any object must be unique among all other objects that share the same root namespace.</p> <p>Based on the uniqueness property of an object name within its parent namespace, an object identifier is the list of object names starting from (not including) the root namespace to (including) the object itself. This is also called an list identifier. For examples:</p> <ul> <li>the list identifier of <code>cat5</code> is <code>[cat2, cat5]</code></li> <li>the list identifier of <code>t1</code> is <code>[cat2, cat5, t1]</code></li> </ul> <p>The dot (<code>.</code>) symbol is typically used as the delimiter to join all the names to form an string identifier, but other symbols could also be used if dot is used in the object name. For examples:</p> <ul> <li>the string identifier of <code>cat5</code> is <code>cat2.cat5</code></li> <li>the string identifier of <code>t1</code> is <code>cat2.cat5.t1</code></li> <li>the string identifier of <code>t3</code> is <code>cat4$t3</code> when using delimiter <code>$</code></li> </ul>"},{"location":"spec/concepts/#name-and-identifier-for-root-namespace","title":"Name and Identifier for Root Namespace","text":"<p>The root namespace itself has no name or identifier. When represented in code, its name and string identifier is represented by an empty or null string, and its list identifier is represented by an empty or null list.</p> <p>The actual name and identifier of the root namespace is typically assigned by users through some configuration when used in a tool. For example, a root namespace can be called <code>cat1</code> in Ray, but called <code>cat2</code> in Apache Spark, and they are both configured to connect to the same root namespace.</p>"},{"location":"spec/concepts/#namespace-level","title":"Namespace Level","text":"<p>If every table has the same number of namespaces all the way to the root namespace, the namespace is called leveled. The example above is not leveled because <code>t1</code> has 2 namespaces <code>ns1</code> and <code>ns4</code> before root, whereas <code>t2</code> has 1 namespace <code>ns2</code> before root.</p> <p>For a leveled namespace, the number of namespaces up to and including the root for any table  is referred to as the number of levels. For example, a directory namespace is a 1-level namespace, and a Hive 2.x namespace is a 2-level namespace.</p>"},{"location":"spec/implementations/","title":"Namespace Implementations","text":"<p>A Lance Namespace Implementation is an implementation of the Lance namespace specification, more specifically:</p> <ol> <li>It satisfies all the Lance namespace definitions and concepts.</li> <li>It declares and implements a list of supported Lance namespace operations.</li> </ol>"},{"location":"spec/implementations/#implementation-and-storage","title":"Implementation and Storage","text":"<p>Except for any storage-only implementation (e.g. directory namespace), a Lance table exists both in the storage and the implementation. For example, a Lance table exists both in HMS and storage for the Hive namespace. There are 2 possible ways to manage a Lance table under such setting. A Lance namespace implementation can choose to support one or both:</p>"},{"location":"spec/implementations/#implementation-managed-table","title":"Implementation Managed Table","text":"<p>A implementation managed Lance table is a table that is fully managed by the Lance namespace implementation. The implementation must maintain information about the latest version of the Lance table. Any modifications to the table must happen through the implementation. If a user directly modifies the underlying table in the storage bypassing the implementation, the implementation must not reflect the changes in the table to the namespace users.</p> <p>This mode ensures the namespace service is aware of all activities in the table, and can thus fully enforce any governance and management features for the table.</p>"},{"location":"spec/implementations/#storage-managed-table","title":"Storage Managed Table","text":"<p>A storage managed Lance table is a table that is fully managed by the storage with a metadata definition in the Lance namespace implementation. The implementation only contains information about the table directory location. It is expected that a tool finds the latest version of the Lance table based on the contents in the table directory according to the Lance format specification. A modification to the table can happen either directly against the storage, or happen as a request to the implementation, where the implementation is responsible for applying the corresponding change to the underlying storage according to the Lance format specification.</p> <p>This mode is more flexible for real world ML/AI workflows but the implementation loses full visibility and control over the actions performed against the table, so it will be harder to enforce any governance and management features for storage managed tables.</p>"},{"location":"spec/operations/","title":"Namespace Operations","text":"<p>The Lance Namespace Specification defines a list of operations that can be performed against any Lance namespace:</p> Operation ID Latest Version Description Notes ListOperations 1 List the operations that are supported by this Lance namespace ListNamespaces 1 List the names of child namespaces in the parent namespace, or root namespace if parent namespace is not specified NamespaceExists 1 Check if a namespace exists Returns no response DescribeNamespace 1 Describe information of a namespace CreateNamespace 1 Create a new namespace under a parent namespace, or root namespace if parent namespace is not specified AlterNamespace 1 Alter information of a namespace DropNamespace 1 Drop a namespace from its a parent namespace, or root namespace if parent namespace is not specified ListTables 1 List the names of tables in a namespace TableExists 1 Check if a table exists Returns no response DescribeTable 2 Describe information of a Lance table in the namespace CreateTable 1 Create a new Lance table under a namespace RegisterTable 1 Register an existing table at a given storage location to a namespace AlterTable 1 Alter information of a Lance table DropTable 1 Drop a table from its namespace DeregisterTable 1 Deregister a table from its namespace, table content is kept unchanged in storage InsertIntoTable 1 Insert Arrow record batches into a table Takes Arrow IRC record batches stream as request MergeInsertIntoTable 1 Merge or insert Arrow record batches into a table based on matching condition of specific column values Takes Arrow IRC record batches stream as request UpdateTable 1 Update rows in a table based on conditions DeleteFromTable 1 Delete rows from a table based on conditions QueryTable 1 Query a table and return Arrow record batches Returns Arrow IRC record batches stream as response CountTableRows 1 Count the number of rows in a table Returns table row count as response CreateTableIndex 1 Create an index on a table CreateScalarTableIndex 1 Create a scalar index on a table DescribeTableIndexStats 1 Describe statistics of an index DescribeTransaction 1 Describe information of a transaction AlterTransaction 1 Alter information of a transaction"},{"location":"spec/operations/#operation-versioning","title":"Operation Versioning","text":"<p>When backwards incompatible change is introduced, a new operation version needs to be created, with a naming convention of <code>&lt;operationId&gt;V&lt;version&gt;</code>, for example <code>ListNamespacesV2</code>, <code>DescribeTableV3</code>, etc.</p>"},{"location":"spec/operations/#operation-request-and-response-schema","title":"Operation Request and Response Schema","text":"<p>In general, each operation has a request and response. The request and response schema is defined using JSON schema in the  <code>components/schemas</code> section of the OpenAPI specification.</p> <p>Note</p> <p>For exceptions to this rule, see the Notes section of the operations</p>"},{"location":"spec/tools/","title":"Tool Integration Guidelines","text":"<p>Tools refer to all the ML/AI training tools and analytics compute engines that can integrate with Lance tables. The following are guidelines for tools to integrate with Lance namespaces. Note that these are recommendations rather than hard requirements. The goal of these guidelines is to offer a consistent user experience across different tools.</p>"},{"location":"spec/tools/#configuring-the-implementation","title":"Configuring the Implementation","text":"<p>We recommend tools to offer a <code>impl</code> config key that allows user to configure the Namespace implementation. We recommend the following values for the natively supported implementations:</p> Implementation <code>impl</code> Value Directory dir Apache Hive MetaStore hive REST rest"},{"location":"spec/tools/#configuring-an-implementation-details","title":"Configuring an Implementation Details","text":"<p>We recommend tools to offer implementation specific configurations using the <code>impl</code> value as the config key prefix. For example, all config keys for the directory namespace should start with <code>dir.</code>, like <code>dir.path</code>.</p>"},{"location":"spec/impls/dir/","title":"Lance Directory Namespace","text":"<p>Lance directory namespace is a lightweight and simple 1-level Lance namespace that only contains a list of tables. People can easily get started with creating and using Lance tables directly on top of any local or remote storage system with a Lance directory namespace.</p> <p>A directory namespace maps to a directory on storage, we call such directory a namespace directory. A Lance table corresponds to a subdirectory in the namespace directory. We call such a subdirectories table directory. Consider the following example namespace directory layout:</p> <pre><code>.\n\u2514\u2500\u2500 /my/dir1/\n    \u251c\u2500\u2500 table1/\n    \u2502   \u251c\u2500\u2500 data/\n    \u2502   \u2502   \u251c\u2500\u2500 0aa36d91-8293-406b-958c-faf9e7547938.lance\n    \u2502   \u2502   \u2514\u2500\u2500 ed7af55d-b064-4442-bcb5-47b524e98d0e.lance\n    \u2502   \u251c\u2500\u2500 _versions/\n    \u2502   \u2502   \u2514\u2500\u2500 9223372036854775707.manifest\n    \u2502   \u251c\u2500\u2500 _indices/\n    \u2502   \u2502   \u2514\u2500\u2500 85814508-ed9a-41f2-b939-2050bb7a0ed5-fts/\n    \u2502   \u2502       \u2514\u2500\u2500 index.idx\n    \u2502   \u2514\u2500\u2500 _deletions/\n    \u2502       \u2514\u2500\u2500 75c69434-cde5-4c80-9fe1-e79a6d952fbf.bin\n    \u251c\u2500\u2500 table2\n    \u2514\u2500\u2500 table3\n</code></pre> <p>This describes a Lance directory namespace with the namespace directory at <code>/my/dir1/</code>. It contains tables <code>table1</code>, <code>table2</code>, <code>table3</code> sitting at table directories <code>/my/dirs/table1</code>, <code>/my/dirs/table2</code>, <code>/my/dirs/table3</code> respectively.</p>"},{"location":"spec/impls/dir/#directory-path","title":"Directory Path","text":"<p>There are 3 ways to specify a directory path:</p> <ol> <li>URI: a URI that follows the RFC 3986 specification, e.g. <code>s3://mu-bucket/prefix</code>.</li> <li>Absolute POSIX storage path: an absolute file path in a POSIX standard storage, e.g. <code>/my/dir</code>.</li> <li>Relative POSIX storage path: a relative file path in a POSIX standard storage, e.g. <code>my/dir2</code>, <code>./my/dir3</code>.    The absolute path of the directory should be based on the current directory of the running process.</li> </ol>"},{"location":"spec/impls/dir/#table-existence","title":"Table Existence","text":"<p>A table exists in a Lance directory namespace if a table directory of the specific name exists. This is true even if the directory is empty or the contents in the directory does not follow the Lance table format spec. For such cases, an operation that lists all tables in the directory should show the specific table, and an operation that checks if a table exists should return true. However, an operation that loads the Lance table metadata should fail with error indicating the content in the folder is not compliant with the Lance table format spec.</p>"},{"location":"spec/impls/hive/","title":"Lance Hive Namespace","text":"<p>Lance Hive Namespace is an implementation using Apache Hive MetaStore (HMS). For more details about HMS, please read HMS AdminManual 2.x  and HMS AdminManual 3.x. </p>"},{"location":"spec/impls/hive/#namespace-mapping","title":"Namespace Mapping","text":"<p>A HMS server can be viewed as the root Lance namespace.</p> <p>For HMS 2.x and below, a database in HMS maps to the first level Lance namespace to form a 2-level Lance namespace as a whole.</p> <p>For HMS 3.x and above, a catalog in HMS maps to the first level Lance namespace, and a database in HMS maps to the second level Lance namespace to form a 3-level Lance namespace as a whole.</p>"},{"location":"spec/impls/hive/#table-definition","title":"Table Definition","text":"<p>A Lance table should appear as a Table object  in HMS with the following requirements:</p> <ol> <li>the <code>tableType</code> must be set as <code>EXTERNAL_TABLE</code> to indicate this is not a managed Hive table</li> <li>the <code>location</code> in <code>storageDescriptor</code> must point to the root location of the Lance table</li> <li>the <code>parameters</code> must follow:<ol> <li>there is a key <code>table_type</code> set to <code>lance</code> (case insensitive)</li> <li>there is a key <code>managed_by</code> set to either <code>storage</code> or <code>impl</code> (case insensitive). If not set, default to <code>storage</code></li> <li>there is a key <code>version</code> set to the latest numeric version number of the table. This field will only be respected if <code>managed_by=impl</code> </li> </ol> </li> </ol>"},{"location":"spec/impls/hive/#requirement-for-implementation-managed-table","title":"Requirement for Implementation Managed Table","text":"<p>An update to the implementation managed table must use Hive's atomic update feature (HIVE-26882) and use the <code>version</code> parameter value to perform conditional update through alter_table_with_environment_context</p>"},{"location":"spec/impls/iceberg/","title":"Lance Iceberg Namespace","text":"<p>Lance Iceberg Namespace is an implementation using Apache Iceberg REST Catalog (IRC). For more details about IRC, please read the IRC Specification.</p> <p>Note</p> <p>This implementation is designed against the IRC spec as of Iceberg release version 1.9.0.</p>"},{"location":"spec/impls/iceberg/#namespace-mapping","title":"Namespace Mapping","text":"<p>An IRC server can be viewed as the root Lance namespace. The Iceberg multi-level namespaces map to the multi-level child namespaces. Whether the namespace is leveled and the number of levels depend on the specific IRC provider.</p>"},{"location":"spec/impls/iceberg/#table-definition","title":"Table Definition","text":"<p>A Lance table should appear as a table object in IRC in the shape of Iceberg TableMetadata, with the following requirements:</p> <ol> <li>the <code>location</code> must point to the root location of the Lance table</li> <li>the <code>properties</code> must follow:<ol> <li>there is a key <code>table_type</code> set to <code>lance</code> (case insensitive)</li> <li>there is a key <code>managed_by</code> set to either <code>storage</code> or <code>impl</code> (case insensitive). If not set, default to <code>storage</code></li> </ol> </li> <li>the <code>current-snapshot-id</code> is set to the latest numeric version number of the table. This field will only be respected if <code>managed_by=impl</code></li> </ol> <p>When a user performs a <code>LoadTable</code> API call to retrieve the table metadata,  the server must not return a <code>metadata-location</code> in the <code>LoadTableResponse</code>.</p>"},{"location":"spec/impls/iceberg/#requirement-for-implementation-managed-table","title":"Requirement for Implementation Managed Table","text":"<p>An update to the implementation managed table must go through IRC UpdateTable API  or CommitTransaction API with a requirement that the <code>assert-ref-snapshot-id</code> is the current Lance table version. If the commit fails due to unresolvable concurrent commits, the IRC server must fail with <code>409 Conflict</code> according to the IRC spec.</p>"},{"location":"spec/impls/iceberg/#using-lance-table-in-irc-with-iceberg-tooling","title":"Using Lance Table in IRC with Iceberg Tooling","text":"<p>In order to use the table with Iceberg tooling (e.g. <code>pyiceberg</code>), the implementation can optionally set the following in Iceberg TableMetadata:</p> <ol> <li>there is at least one schema in the list of <code>schemas</code><ol> <li>the schema reflects the latest schema of the Lance table</li> <li>the schema has ID <code>1</code></li> <li>the data type conversion follows Apache Arrow to Apache Iceberg data type conversion.</li> </ol> </li> <li>the <code>current-schema-id</code> is set to <code>1</code></li> <li>there is at least one snapshot in the list of <code>snapshots</code>.<ol> <li>the snapshot should have <code>snapshot-id</code> set to the latest numeric version number of the table.</li> </ol> </li> <li>there is at least one snapshot log in the list of <code>snapshot-log</code><ol> <li>the snapshot log should have <code>snapshot-id</code> set to the latest numeric version number of the table.</li> </ol> </li> </ol>"},{"location":"spec/impls/overview/","title":"Overview","text":""},{"location":"spec/impls/overview/#native-implementations","title":"Native Implementations","text":"<p>A native Lance namespace implementation is a Lance Namespace implementation  that is maintained in this <code>lance-namespace</code> repository. Any implementation that is outside the repository is considered as a third-party implementation.</p>"},{"location":"spec/impls/rest/","title":"Lance REST Namespace","text":"<p>In an enterprise environment, typically there is a requirement to store tables in a metadata service for more advanced governance features around access control, auditing, lineage tracking, etc. Lance REST Namespace is an OpenAPI protocol that enables reading, writing and managing Lance tables by connecting those metadata services or building a custom metadata server in a standardized way. The REST server definition can be found in the OpenAPI specification.</p>"},{"location":"spec/impls/rest/#rest-routes","title":"REST Routes","text":"<p>The REST route for an operation typically follows the pattern of <code>POST /&lt;version&gt;/&lt;object&gt;/{id}/&lt;action&gt;</code>, for example <code>POST /v1/namespace/{id}/list</code> for <code>ListNamespace</code>. The request and response schemas are used as the actual request and response of the route. </p> <p>The key design principle of the REST route is that all the necessary information for a reverse proxy  (e.g. load balancing, authN, authZ) should be available for access without the need to deserialize request body.</p> <p>The information in the route could also present in the request body. When the information in the route and request body both present but do not match, the server must throw a 400 Bad Request error. When the information in the request body is missing, the server must use the information in the route instead.</p> <p>For routes that involve multiple objects, all related objects should be present in the route. For example, the route for <code>RenameTable</code> is thus <code>POST /v1/table/{id}/rename/to/{id}</code>.</p>"},{"location":"spec/impls/rest/#handling-non-standard-request-and-response","title":"Handling Non-Standard Request and Response","text":"<p>For request and response that cannot be simply described as a JSON object  (e.g. <code>InsertIntoTable</code> request is Arrow IPC stream), the REST server needs to perform special handling to describe equivalent information through path parameters, query parameters and headers. The sepcific handling is described in the OpenAPI spec.</p>"},{"location":"spec/impls/rest/#namespace-server-and-adapter","title":"Namespace Server and Adapter","text":"<p>Any REST HTTP server that implements this OpenAPI protocol is called a Lance Namespace server. If you are a metadata service provider that is building a custom implementation of Lance namespace, building a REST server gives you standardized integration to Lance without the need to worry about tool support and continuously distribute newer library versions compared to using an implementation.</p> <p>If the main purpose of this server is to be a proxy on top of an existing metadata service, converting back and forth between Lance REST API models and native API models of the metadata service, then this Lance namespace server is called a Lance Namespace adapter.</p>"},{"location":"spec/impls/rest/#choosing-between-an-adapter-vs-an-implementation","title":"Choosing between an Adapter vs an Implementation","text":"<p>Any adapter can always be directly a Lance namespace implementation bypassing the REST server, and vise versa. In fact, an implementation is basically the backend of an adapter. For example, we natively support a Lance HMS Namespace implementation, as well as a Lance namespace adapter for HMS by using the HMS Namespace implementation to fulfill requests in the Lance REST server.</p> <p>If you are considering between a Lance namespace adapter vs implementation to build or use in your environment, here are some criteria to consider:</p> <ol> <li>Multi-Language Feasibility &amp; Maintenance Cost: If you want a single strategy that works across all Lance language bindings, an adapter is preferred.    Sometimes it is not even possible for an integration to go with the implementation approach since it cannot support all the languages.    Sometimes an integration is popular or important enough that it is viable to build an implementation and maintain one library per language.</li> <li>Tooling Support: each tool needs to declare the Lance namespace implementations it supports.    That means there will be a preference for tools to always support a REST namespace,    but it might not always support a specific implementation. This favors the adapter approach.</li> <li>Security: if you have security concerns about the adapter being a man-in-the-middle, you should choose an implementation</li> <li>Performance: after all, adapter adds one layer of indirection and is thus not the most performant solution.    If you are performance sensitive, you should choose an implementation</li> </ol>"},{"location":"user-guide/java-sdk/","title":"Java SDK","text":"<p>This guide explains how to use the Java SDK to interact with a Lance namespace.</p>"},{"location":"user-guide/java-sdk/#installation","title":"Installation","text":"<p>Add the following dependency to your Maven project:</p> <pre><code>&lt;dependency&gt;\n    &lt;groupId&gt;com.lancedb&lt;/groupId&gt;\n    &lt;artifactId&gt;lance-namespace-core&lt;/artifactId&gt;\n    &lt;version&gt;0.0.2&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre> <p>The artifact is available on Maven Central.</p>"},{"location":"user-guide/java-sdk/#configuration-and-initialization","title":"Configuration and Initialization","text":""},{"location":"user-guide/java-sdk/#lance-rest-catalog","title":"Lance REST Catalog","text":"<p>Use the following initialization approach:</p> <pre><code>import com.lancedb.lance.namespace.LanceRestNamespace;\n\nApiClient apiClient = new ApiClient();\napiClient.setBasePath(\"https://my-lance-namespace.com\");\nLanceRestNamespace namespace = new LanceRestNamespace(apiClient, config);\n</code></pre>"},{"location":"user-guide/java-sdk/#supported-endpoints","title":"Supported Endpoints","text":"<p>The Java SDK supports the following endpoints. Full API documentation is available at  javadoc.io.</p>"},{"location":"user-guide/java-sdk/#table-operations","title":"Table Operations","text":"<ul> <li>countTableRows - Count the number of rows in a table</li> <li>createTable - Create a new table with Arrow data</li> <li>describeTable - Get table metadata and schema</li> <li>dropTable - Delete a table</li> <li>insertIntoTable - Insert data into a table</li> <li>updateTable - Update rows in a table</li> <li>deleteFromTable - Delete rows from a table</li> <li>mergeInsertIntoTable - Upsert operation (update or insert)</li> <li>queryTable - Vector similarity search</li> </ul>"},{"location":"user-guide/java-sdk/#index-operations","title":"Index Operations","text":"<ul> <li>createTableIndex - Create a vector index</li> <li>createTableIndex - Create a vector or scalar index</li> <li>listTableIndices - List all indices on a table</li> <li>describeTableIndexStats - Get statistics for a specific index</li> </ul>"},{"location":"user-guide/java-sdk/#request-and-response-structure","title":"Request and Response Structure","text":"<p>Response Fields</p> <p>The response structures contain fields like <code>location</code>, <code>name</code>, <code>namespace</code>, and <code>properties</code> that are part of the lance-namespace protocol. These fields will be empty in responses and should be ignored.</p> <p>Request Fields</p> <p>The request structures contain field <code>name</code> which refers to the table name and is required. The <code>namespace</code> field is optional; if provided, the resulting table name will be in the format <code>namespace.name</code>.</p> <p>For detailed request/response structures, refer to the Apache Client documentation.</p>"},{"location":"user-guide/java-sdk/#examples","title":"Examples","text":""},{"location":"user-guide/java-sdk/#creating-a-table","title":"Creating a Table","text":"<p>Lance Namespace uses Apache Arrow format for data exchange. Here's a simple example creating a table with ID and embedding columns:</p> <pre><code>import org.apache.arrow.memory.BufferAllocator;\nimport org.apache.arrow.memory.RootAllocator;\nimport org.apache.arrow.vector.*;\nimport org.apache.arrow.vector.complex.FixedSizeListVector;\nimport org.apache.arrow.vector.types.pojo.*;\nimport org.apache.arrow.vector.types.FloatingPointPrecision;\nimport org.apache.arrow.vector.ipc.ArrowStreamWriter;\nimport java.io.ByteArrayOutputStream;\nimport java.nio.channels.Channels;\nimport java.util.Arrays;\n\n// Define schema: id and embedding columns\nField idField = new Field(\"id\", FieldType.nullable(new ArrowType.Int(32, true)), null);\nField embeddingField = new Field(\n    \"embedding\",\n    FieldType.nullable(new ArrowType.FixedSizeList(128)),  // 128-dimensional vectors\n    Arrays.asList(\n        new Field(\"item\", \n            FieldType.nullable(new ArrowType.FloatingPoint(FloatingPointPrecision.SINGLE)), \n            null)\n    )\n);\nSchema schema = new Schema(Arrays.asList(idField, embeddingField));\n\n// Create table with 1000 rows\ntry (BufferAllocator allocator = new RootAllocator();\n     VectorSchemaRoot root = VectorSchemaRoot.create(schema, allocator)) {\n\n    int numRows = 1000;\n    root.setRowCount(numRows);\n\n    // Get vectors\n    IntVector idVector = (IntVector) root.getVector(\"id\");\n    FixedSizeListVector embeddingVector = (FixedSizeListVector) root.getVector(\"embedding\");\n    Float4Vector dataVector = (Float4Vector) embeddingVector.getDataVector();\n\n    // Allocate memory\n    embeddingVector.allocateNew();\n\n    // Populate data\n    for (int i = 0; i &lt; numRows; i++) {\n        // Set ID\n        idVector.setSafe(i, i + 1);\n\n        // Set embedding vector\n        embeddingVector.setNotNull(i);\n        for (int dim = 0; dim &lt; 128; dim++) {\n            int index = i * 128 + dim;\n            // Example: random values (in practice, use your actual embeddings)\n            dataVector.setSafe(index, (float) Math.random());\n        }\n    }\n\n    // Set value counts\n    idVector.setValueCount(numRows);\n    dataVector.setValueCount(numRows * 128);\n    embeddingVector.setValueCount(numRows);\n\n    // Serialize to Arrow IPC format\n    ByteArrayOutputStream out = new ByteArrayOutputStream();\n    try (ArrowStreamWriter writer = new ArrowStreamWriter(root, null, Channels.newChannel(out))) {\n        writer.start();\n        writer.writeBatch();\n        writer.end();\n    }\n\n    // Create table in LanceDB\n    byte[] arrowData = out.toByteArray();\n\n    CreateTableRequest createRequest = new CreateTableRequest();\n    createRequest.setName(\"my_vectors\");\n    CreateTableResponse response = namespace.createTable(createRequest, arrowData);\n    System.out.println(\"Created table with \" + numRows + \" rows\");\n}\n</code></pre> <p>For more complex schemas (e.g., with text fields for full-text search, categorical fields for filtering), you can add additional fields to the schema as needed.</p>"},{"location":"user-guide/java-sdk/#querying-a-table","title":"Querying a Table","text":"<p>Query results are returned in Arrow File format. Use <code>ArrowFileReader</code> to read the results.</p>"},{"location":"user-guide/java-sdk/#vector-search","title":"Vector Search","text":"<pre><code>import com.lancedb.lance.namespace.model.QueryTableRequest;\nimport com.lancedb.lance.namespace.model.QueryTableRequestVector;\nimport org.apache.arrow.vector.ipc.ArrowFileReader;\nimport org.apache.arrow.memory.ArrowBuf;\nimport org.apache.arrow.vector.ipc.message.ArrowBlock;\nimport java.nio.channels.SeekableByteChannel;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Arrays;\n\n// Find similar items by vector\nQueryTableRequest queryRequest = new QueryTableRequest();\nqueryRequest.setName(\"my_vectors\");\nqueryRequest.setK(10);  // Get top 10 results\n\n// Create query vector (in practice, this would be your actual query embedding)\nList&lt;Float&gt; queryVector = new ArrayList&lt;&gt;();\nfor (int i = 0; i &lt; 128; i++) {\n    queryVector.add((float) Math.random());\n}\n\nQueryTableRequestVector vectorQuery = new QueryTableRequestVector();\nvectorQuery.setSingleVector(queryVector);\nqueryRequest.setVector(vectorQuery);\n\n// REQUIRED: Specify columns to return\nqueryRequest.setColumns(Arrays.asList(\"id\", \"embedding\"));\n\n// Optional: Set fast_search for better performance (only searches indexed data)\nqueryRequest.setFastSearch(true);\n\n// Execute query\nbyte[] queryResult = namespace.queryTable(queryRequest);\n\n// Parse results\ntry (BufferAllocator allocator = new RootAllocator();\n     ArrowFileReader reader = new ArrowFileReader(\n         new SeekableByteChannel() { /* See ArrowTestUtils for full implementation */ }, \n         allocator)) {\n\n    reader.loadRecordBatch(reader.getRecordBlocks().get(0));\n    VectorSchemaRoot root = reader.getVectorSchemaRoot();\n\n    IntVector idVector = (IntVector) root.getVector(\"id\");\n\n    System.out.println(\"Found \" + root.getRowCount() + \" similar vectors:\");\n    for (int i = 0; i &lt; Math.min(5, root.getRowCount()); i++) {\n        System.out.println(\"  ID: \" + idVector.get(i));\n    }\n}\n</code></pre>"},{"location":"user-guide/java-sdk/#fast-search-option","title":"Fast Search Option","text":"<p>Always use <code>fast_search=true</code> if possible. When enabled, the query will only search indexed data, providing better performance and avoiding potential data egress costs. When disabled, it will scan the entire unindexed portion of the column from storage, which can be slow and expensive.</p> <pre><code>QueryTableRequest queryRequest = new QueryTableRequest();\nqueryRequest.setName(\"my_table\");\n\nQueryTableRequestVector vectorQuery = new QueryTableRequestVector();\nvectorQuery.setSingleVector(queryVector);\nqueryRequest.setVector(vectorQuery);\nqueryRequest.setK(10);\n\nqueryRequest.setFastSearch(true); // Recommended for better performance\n</code></pre>"},{"location":"user-guide/java-sdk/#sql-filters","title":"SQL Filters","text":"<p>You can use SQL filters with or without vector search:</p> <pre><code>// Example 1: Filter-only query (no vector search)\nQueryTableRequest filterQuery = new QueryTableRequest();\nfilterQuery.setName(\"my_table\");\nfilterQuery.setK(20);  // Maximum results to return\nfilterQuery.setFilter(\"id &gt;= 100 AND id &lt; 200\");\nfilterQuery.setColumns(Arrays.asList(\"id\")); // Required!\n\nbyte[] filterResult = namespace.queryTable(filterQuery);\n\n// Example 2: Vector search with filter\nQueryTableRequest vectorWithFilter = new QueryTableRequest();\nvectorWithFilter.setName(\"my_vectors\");\nvectorWithFilter.setK(5);\n\n// Create query vector\nList&lt;Float&gt; queryVector = new ArrayList&lt;&gt;();\nfor (int i = 0; i &lt; 128; i++) {\n    queryVector.add((float) Math.random());\n}\nQueryTableRequestVector vectorQuery2 = new QueryTableRequestVector();\nvectorQuery2.setSingleVector(queryVector);\nvectorWithFilter.setVector(vectorQuery2);\n\n// Only search within specific ID range\nvectorWithFilter.setFilter(\"id &gt;= 500 AND id &lt; 600\");\nvectorWithFilter.setColumns(Arrays.asList(\"id\"));\n\nbyte[] filteredVectorResult = namespace.queryTable(vectorWithFilter);\n\n// Example 3: Complex filter expressions\nQueryTableRequest complexFilter = new QueryTableRequest();\ncomplexFilter.setName(\"my_table\");\ncomplexFilter.setK(100);\ncomplexFilter.setFilter(\"id &gt;= 10 AND id &lt;= 90\");\ncomplexFilter.setColumns(Arrays.asList(\"id\"));\n\n// Supported SQL operators:\n// - Comparison: =, !=, &lt;, &gt;, &lt;=, &gt;=\n// - Logical: AND, OR, NOT\n// - IN: category IN ('category1', 'category2')\n// - String: LIKE for pattern matching\n</code></pre>"},{"location":"user-guide/java-sdk/#prefilter-vs-postfilter","title":"Prefilter vs Postfilter","text":"<p>When combining vector search with filters, use <code>prefilter</code> to control the order of operations: - <code>prefilter=true</code>: Apply filter BEFORE vector search (faster when filter is selective) - <code>prefilter=false</code>: Apply filter AFTER vector search (better when filter matches many rows)</p> <pre><code>// Prefiltering - filter first, then search vectors\nQueryTableRequest prefilterQuery = new QueryTableRequest();\nprefilterQuery.setName(\"my_table\");\nQueryTableRequestVector vectorQuery3 = new QueryTableRequestVector();\nvectorQuery3.setSingleVector(queryVector);\nprefilterQuery.setVector(vectorQuery3);\nprefilterQuery.setK(10);\nprefilterQuery.setFilter(\"status = 'active'\");\nprefilterQuery.setPrefilter(true);\nprefilterQuery.setFastSearch(true);\n\n// Postfiltering - search vectors first, then filter (default)\nQueryTableRequest postfilterQuery = new QueryTableRequest();\npostfilterQuery.setName(\"my_table\");\nQueryTableRequestVector vectorQuery4 = new QueryTableRequestVector();\nvectorQuery4.setSingleVector(queryVector);\npostfilterQuery.setVector(vectorQuery4);\npostfilterQuery.setK(10);\npostfilterQuery.setFilter(\"category = 'electronics'\");\npostfilterQuery.setPrefilter(false);\npostfilterQuery.setFastSearch(true);\n</code></pre>"},{"location":"user-guide/java-sdk/#full-text-search","title":"Full-Text Search","text":"<p>Lance supports full-text search on string columns. First create an FTS index, then use text queries:</p> <pre><code>// Step 1: Create table with text content (add text columns to your schema)\n\n// Step 2: Create FTS index\nCreateTableIndexRequest ftsIndexRequest = new CreateTableIndexRequest();\nftsIndexRequest.setName(\"documents\");\nftsIndexRequest.setColumn(\"content\");\nftsIndexRequest.setIndexType(CreateTableIndexRequest.IndexTypeEnum.FTS);\n// Set withPosition=true if you plan to use PhraseQuery\nftsIndexRequest.setWithPosition(true);\n\nCreateTableIndexResponse ftsResponse = namespace.createTableIndex(ftsIndexRequest);\n// Wait for index to be built\nboolean indexReady = waitForIndexComplete(\"documents\", \"content_idx\", 30);\n\n// Step 3: Perform full-text search\nimport com.lancedb.lance.namespace.model.StringFtsQuery;\nimport com.lancedb.lance.namespace.model.QueryTableRequestFullTextQuery;\n\n// Example 1: Simple keyword search\nQueryTableRequest textQuery = new QueryTableRequest();\ntextQuery.setName(\"documents\");\ntextQuery.setK(5);\ntextQuery.setColumns(Arrays.asList(\"id\", \"title\", \"content\")); // Required!\n\nQueryTableRequestFullTextQuery fullTextQuery = new QueryTableRequestFullTextQuery();\nStringFtsQuery fts = new StringFtsQuery();\nfts.setQuery(\"machine learning\");  // Search for documents about machine learning\nfullTextQuery.setStringQuery(fts);\ntextQuery.setFullTextQuery(fullTextQuery);\n\nbyte[] results = namespace.queryTable(textQuery);\n// Expected: Documents containing \"machine\" and/or \"learning\"\n\n// Example 2: Search specific columns\nStringFtsQuery columnSearch = new StringFtsQuery();\ncolumnSearch.setQuery(\"neural networks\");\ncolumnSearch.setColumns(Arrays.asList(\"content\")); // Only search in content column\nfullTextQuery.setStringQuery(columnSearch);\n\n// Example 3: Full-text search with filter\nQueryTableRequest ftsWithFilter = new QueryTableRequest();\nftsWithFilter.setName(\"documents\");\nftsWithFilter.setK(10);\nftsWithFilter.setFilter(\"id &lt;= 3\");  // Only search in first 3 documents\nftsWithFilter.setColumns(Arrays.asList(\"id\", \"title\", \"content\"));\n\nStringFtsQuery filteredFts = new StringFtsQuery();\nfilteredFts.setQuery(\"learning\");\nQueryTableRequestFullTextQuery filteredFullText = new QueryTableRequestFullTextQuery();\nfilteredFullText.setStringQuery(filteredFts);\nftsWithFilter.setFullTextQuery(filteredFullText);\n\nbyte[] filteredResults = namespace.queryTable(ftsWithFilter);\n// Expected: Documents 1-3 that contain \"learning\"\n</code></pre>"},{"location":"user-guide/java-sdk/#advanced-structured-full-text-search","title":"Advanced: Structured Full-Text Search","text":"<p>The Java SDK supports complex structured full-text queries including boolean queries and phrase queries:</p> <pre><code>import com.lancedb.lance.namespace.model.*;\n\n// Example 1: Boolean Query - Complex search logic\nQueryTableRequest booleanSearchQuery = new QueryTableRequest();\nbooleanSearchQuery.setName(\"documents\");\nbooleanSearchQuery.setK(10);\nbooleanSearchQuery.setColumns(Arrays.asList(\"id\", \"title\", \"content\"));\n\n// Create structured query wrapper\nQueryTableRequestFullTextQuery fullTextQuery = new QueryTableRequestFullTextQuery();\nStructuredFtsQuery structured = new StructuredFtsQuery();\nFtsQuery ftsQuery = new FtsQuery();\n\n// Boolean query: MUST contain \"learning\" AND (SHOULD contain \"machine\" OR \"deep\")\n// Note: SHOULD clauses are optional when MUST clauses are present - they only affect ranking\nBooleanQuery boolQuery = new BooleanQuery();\n\n// MUST clause: documents must contain \"learning\"\nFtsQuery mustQuery = new FtsQuery();\nMatchQuery mustMatch = new MatchQuery();\nmustMatch.setTerms(\"learning\");\nmustMatch.setColumn(\"content\");\nmustQuery.setMatch(mustMatch);\nboolQuery.setMust(Arrays.asList(mustQuery));\n\n// SHOULD clauses: prefer documents with \"machine\" or \"deep\"\nFtsQuery shouldQuery1 = new FtsQuery();\nMatchQuery shouldMatch1 = new MatchQuery();\nshouldMatch1.setTerms(\"machine\");\nshouldMatch1.setColumn(\"content\");\nshouldQuery1.setMatch(shouldMatch1);\n\nFtsQuery shouldQuery2 = new FtsQuery();\nMatchQuery shouldMatch2 = new MatchQuery();\nshouldMatch2.setTerms(\"deep\");\nshouldMatch2.setColumn(\"content\");\nshouldQuery2.setMatch(shouldMatch2);\nboolQuery.setShould(Arrays.asList(shouldQuery1, shouldQuery2));\n\n// Optional: MUST NOT clause\nFtsQuery mustNotQuery = new FtsQuery();\nMatchQuery mustNotMatch = new MatchQuery();\nmustNotMatch.setTerms(\"beginner\");  // Exclude beginner content\nmustNotQuery.setMatch(mustNotMatch);\nboolQuery.setMustNot(Arrays.asList(mustNotQuery));\n\n// Set the boolean query\nftsQuery.setBoolean(boolQuery);\nstructured.setQuery(ftsQuery);\nfullTextQuery.setStructuredQuery(structured);\nbooleanSearchQuery.setFullTextQuery(fullTextQuery);\n\nbyte[] boolResults = namespace.queryTable(booleanSearchQuery);\n// Expected: Documents containing \"learning\" (required) and preferably \"machine\" or \"deep\"\n\n// Example 2: Phrase Query - Find exact phrases\n// IMPORTANT: PhraseQuery requires the FTS index to be created with withPosition=true\nQueryTableRequest phraseSearchQuery = new QueryTableRequest();\nphraseSearchQuery.setName(\"documents\");\nphraseSearchQuery.setK(5);\nphraseSearchQuery.setColumns(Arrays.asList(\"id\", \"title\", \"content\"));\n\n// Create phrase query\nQueryTableRequestFullTextQuery phraseFullText = new QueryTableRequestFullTextQuery();\nStructuredFtsQuery phraseStructured = new StructuredFtsQuery();\nFtsQuery phraseFtsQuery = new FtsQuery();\n\nPhraseQuery phrase = new PhraseQuery();\nphrase.setTerms(\"machine learning\");  // Find exact phrase\nphrase.setColumn(\"content\");\nphrase.setSlop(1);  // Allow 1 word between \"machine\" and \"learning\"\nphraseFtsQuery.setPhrase(phrase);\n\nphraseStructured.setQuery(phraseFtsQuery);\nphraseFullText.setStructuredQuery(phraseStructured);\nphraseSearchQuery.setFullTextQuery(phraseFullText);\n\nbyte[] phraseResults = namespace.queryTable(phraseSearchQuery);\n// Expected: Documents with \"machine learning\" or \"machine [word] learning\"\n// Note: Phrase queries search for terms in the specified order. \n// \"learning machine\" would NOT match this query.\n</code></pre> <p>PhraseQuery Requirements</p> <p>PhraseQuery requires the FTS index to be created with <code>withPosition=true</code>. If you attempt to use PhraseQuery on an index created without position information, you will receive an error: \"position is not found but required for phrase queries\". </p> <p>Always create your FTS index with position enabled if you plan to use phrase searches: <pre><code>CreateTableIndexRequest ftsIndexRequest = new CreateTableIndexRequest();\nftsIndexRequest.setName(\"documents\");\nftsIndexRequest.setColumn(\"content\");\nftsIndexRequest.setIndexType(CreateTableIndexRequest.IndexTypeEnum.FTS);\nftsIndexRequest.setWithPosition(true);  // Required for PhraseQuery\n</code></pre></p>"},{"location":"user-guide/java-sdk/#creating-a-vector-index","title":"Creating a Vector Index","text":"<p>Lance automatically optimizes index parameters based on best practices for your workload.</p> <p>Best Practices: - Index Type: Use <code>IVF_PQ</code> for production workloads (default) - Metric Type:    - Use <code>L2</code> for normalized vectors (faster computation)   - Use <code>COSINE</code> for non-normalized vectors (more compute-intensive) - Other parameters are automatically tuned by the system</p> <pre><code>import com.lancedb.lance.namespace.model.CreateTableIndexRequest;\n\n// Create vector index\nCreateTableIndexRequest indexRequest = new CreateTableIndexRequest();\nindexRequest.setName(\"my_table\");\nindexRequest.setColumn(\"embedding\");\nindexRequest.setIndexType(CreateTableIndexRequest.IndexTypeEnum.IVF_PQ);\nindexRequest.setMetricType(CreateTableIndexRequest.MetricTypeEnum.L2);\n\nCreateTableIndexResponse response = namespace.createTableIndex(indexRequest);\n</code></pre>"},{"location":"user-guide/java-sdk/#creating-a-scalar-index","title":"Creating a Scalar Index","text":"<p>Scalar indexes improve query performance when using filters.</p> <p>Index Type Selection: - BITMAP Index: Best for columns with low cardinality (&lt; few thousand unique values)   - Excellent search performance   - Relatively small index size - BTREE Index: Use when unique values are high</p> <p>Optimization Tip</p> <p>To enable BITMAP indexing on high-cardinality columns, reduce data precision: - Round floating-point values - Reduce timestamp precision (e.g., second \u2192 day)</p> <pre><code>import com.lancedb.lance.namespace.model.CreateTableIndexRequest;\n\n// Create scalar index\nCreateTableIndexRequest scalarIndexRequest = new CreateTableIndexRequest();\nscalarIndexRequest.setName(\"my_table\");\nscalarIndexRequest.setColumn(\"name\");\nscalarIndexRequest.setIndexType(CreateTableIndexRequest.IndexTypeEnum.BITMAP);\n\nCreateTableIndexResponse scalarResponse = namespace.createTableIndex(scalarIndexRequest);\n</code></pre> <p>Asynchronous Index Creation</p> <p>Similar to vector index creation, scalar index creation is also asynchronous. Use <code>listTableIndices</code> and <code>describeTableIndexStats</code> to monitor index creation progress.</p>"},{"location":"user-guide/java-sdk/#list-indices","title":"List Indices","text":"<p>List all indices on a table:</p> <pre><code>import com.lancedb.lance.namespace.model.ListTableIndicesRequest;\nimport com.lancedb.lance.namespace.model.ListTableIndicesResponse;\n\nListTableIndicesRequest listRequest = new ListTableIndicesRequest();\nlistRequest.setName(\"my_table\");\n\nListTableIndicesResponse listResponse = namespace.listTableIndices(listRequest);\nif (listResponse.getIndexes() != null) {\n    for (IndexListItemResponse index : listResponse.getIndexes()) {\n        System.out.println(\"Index: \" + index.getIndexName());\n        System.out.println(\"  Columns: \" + index.getColumns());\n        System.out.println(\"  Index Type: \" + index.getIndexType());\n    }\n}\n</code></pre>"},{"location":"user-guide/java-sdk/#get-index-statistics","title":"Get Index Statistics","text":"<p>Get detailed statistics for a specific index: <pre><code>import com.lancedb.lance.namespace.model.DescribeTableIndexStatsRequest;\nimport com.lancedb.lance.namespace.model.DescribeTableIndexStatsResponse;\n\nDescribeTableIndexStatsRequest statsRequest = new DescribeTableIndexStatsRequest();\nstatsRequest.setName(\"my_table\");\n\n// Get stats for specific index (index name format: &lt;column_name&gt;_idx)\nDescribeTableIndexStatsResponse stats = namespace.describeTableIndexStats(statsRequest, \"embedding_idx\");\n\nSystem.out.println(\"Index Type: \" + stats.getIndexType());\nSystem.out.println(\"Distance Type: \" + stats.getDistanceType());\nSystem.out.println(\"Indexed Rows: \" + stats.getNumIndexedRows());\nSystem.out.println(\"Unindexed Rows: \" + stats.getNumUnindexedRows());\nSystem.out.println(\"Index Metadata: \" + stats.getIndexMetadata());\n</code></pre></p>"},{"location":"user-guide/java-sdk/#monitoring-index-creation","title":"Monitoring Index Creation","text":"<p>Wait for Index Completion</p> <p>Index creation is asynchronous. Always wait for indexes to be fully built before running queries to ensure optimal performance and avoid scanning unindexed data.</p> <p>Here's a helper method that combines <code>listTableIndices</code> and <code>describeTableIndexStats</code> to monitor index creation:</p> <pre><code>import java.util.Optional;\n\n/**\n * Wait for index to be fully built with no unindexed rows\n * @param tableName The name of the table\n * @param indexName The expected index name (usually column_name + \"_idx\")\n * @param maxSeconds Maximum seconds to wait\n * @return true if index is complete, false if timeout\n */\nprivate boolean waitForIndexComplete(String tableName, String indexName, int maxSeconds) \n    throws InterruptedException {\n\n    ListTableIndicesRequest listRequest = new ListTableIndicesRequest();\n    listRequest.setName(tableName);\n\n    for (int i = 0; i &lt; maxSeconds; i++) {\n        ListTableIndicesResponse listResponse = namespace.listTableIndices(listRequest);\n        if (listResponse.getIndexes() != null) {\n            Optional&lt;IndexListItemResponse&gt; indexOpt = listResponse.getIndexes().stream()\n                .filter(idx -&gt; idx.getIndexName().equals(indexName))\n                .findFirst();\n\n            if (indexOpt.isPresent()) {\n                DescribeTableIndexStatsRequest statsRequest = new DescribeTableIndexStatsRequest();\n                statsRequest.setName(tableName);\n                DescribeTableIndexStatsResponse stats = namespace.describeTableIndexStats(statsRequest, indexName);\n                if (stats != null &amp;&amp; stats.getNumUnindexedRows() != null \n                    &amp;&amp; stats.getNumUnindexedRows() == 0) {\n                    return true;\n                }\n            }\n        }\n        Thread.sleep(1000);\n    }\n    return false;\n}\n\n// Usage example\nCreateTableIndexResponse response = namespace.createTableIndex(indexRequest);\nboolean indexReady = waitForIndexComplete(\"my_table\", \"embedding_idx\", 60);\nif (!indexReady) {\n    System.out.println(\"Warning: Index creation timed out\");\n}\n</code></pre>"},{"location":"user-guide/java-sdk/#inserting-additional-data","title":"Inserting Additional Data","text":"<pre><code>// Insert more rows into existing table\n// Create Arrow data with same schema as original table\nbyte[] newData = createArrowData(/* new rows */);\n\nInsertIntoTableRequest insertRequest = new InsertIntoTableRequest();\ninsertRequest.setName(\"my_table\");\ninsertRequest.setMode(InsertIntoTableRequest.ModeEnum.APPEND);\nInsertIntoTableResponse insertResponse = namespace.insertIntoTable(insertRequest, newData);\nSystem.out.println(\"Inserted rows, new version: \" + insertResponse.getVersion());\n</code></pre>"},{"location":"user-guide/java-sdk/#counting-rows","title":"Counting Rows","text":"<pre><code>CountTableRowsRequest countRequest = new CountTableRowsRequest();\ncountRequest.setName(\"my_table\");\n\nlong rowCount = namespace.countTableRows(countRequest);\nSystem.out.println(\"Table has \" + rowCount + \" rows\");\n\n// Count with filter\ncountRequest.setFilter(\"id &gt;= 100 AND id &lt; 200\");\nlong filteredCount = namespace.countTableRows(countRequest);\nSystem.out.println(\"Filtered count: \" + filteredCount + \" rows\");\n</code></pre>"},{"location":"user-guide/java-sdk/#updating-data","title":"Updating Data","text":"<pre><code>import com.lancedb.lance.namespace.model.UpdateTableRequest;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\n\n// Example: Update rows based on condition\nUpdateTableRequest updateRequest = new UpdateTableRequest();\nupdateRequest.setName(\"my_table\");\nupdateRequest.setNamespace(new ArrayList&lt;&gt;());\nupdateRequest.setPredicate(\"id &gt;= 50 AND id &lt;= 60\");\n\nList&lt;List&lt;String&gt;&gt; updates = new ArrayList&lt;&gt;();\n// Note: string values need quotes, numeric values don't\nupdates.add(Arrays.asList(\"some_field\", \"'updated_value'\"));\nupdateRequest.setUpdates(updates);\n\nUpdateTableResponse updateResponse = namespace.updateTable(updateRequest);\nSystem.out.println(\"Updated \" + updateResponse.getUpdatedRows() + \" rows\");\n</code></pre>"},{"location":"user-guide/java-sdk/#deleting-data","title":"Deleting Data","text":"<pre><code>import com.lancedb.lance.namespace.model.DeleteFromTableRequest;\n\n// Delete specific rows\nDeleteFromTableRequest deleteRequest = new DeleteFromTableRequest();\ndeleteRequest.setName(\"my_table\");\ndeleteRequest.setNamespace(new ArrayList&lt;&gt;());\ndeleteRequest.setPredicate(\"id &gt; 900\");\n\nDeleteFromTableResponse deleteResponse = namespace.deleteFromTable(deleteRequest);\nSystem.out.println(\"Deleted rows, new version: \" + deleteResponse.getVersion());\n</code></pre>"},{"location":"user-guide/java-sdk/#describing-a-table","title":"Describing a Table","text":"<pre><code>DescribeTableRequest describeRequest = new DescribeTableRequest();\ndescribeRequest.setName(\"my_table\");\n\nDescribeTableResponse tableInfo = namespace.describeTable(describeRequest);\nSystem.out.println(\"Table location: \" + tableInfo.getLocation());\nSystem.out.println(\"Schema: \" + tableInfo.getSchema());\nSystem.out.println(\"Version: \" + tableInfo.getVersion());\n</code></pre>"},{"location":"user-guide/java-sdk/#merge-insert-upsert","title":"Merge Insert (Upsert)","text":"<pre><code>import com.lancedb.lance.namespace.model.MergeInsertIntoTableRequest;\n\n// Prepare data (similar to create table)\nbyte[] arrowIpcData = prepareArrowData();\n\n// Create merge request\nMergeInsertIntoTableRequest mergeRequest = new MergeInsertIntoTableRequest();\nmergeRequest.setName(\"my_table\");\nmergeRequest.setOn(\"id\");    // match on id column\nmergeRequest.setWhenMatchedUpdateAll(true);    // when_matched_update_all\nmergeRequest.setWhenNotMatchedInsertAll(true); // when_not_matched_insert_all\n\n// Perform merge insert\nMergeInsertIntoTableResponse response = namespace.mergeInsertIntoTable(\n    mergeRequest,\n    arrowIpcData\n);\n\nSystem.out.println(\"Updated rows: \" + response.getNumUpdatedRows());\nSystem.out.println(\"Inserted rows: \" + response.getNumInsertedRows());\n</code></pre>"},{"location":"user-guide/java-sdk/#known-limitation","title":"Known Limitation","text":""},{"location":"user-guide/java-sdk/#not-supported-hybrid-search","title":"Not Supported: Hybrid Search","text":"<p>Hybrid Search requires a vector search and a full text search, cannot run both in one query. Need higher level of search orchestration to provide user level hybrid search operations.</p>"},{"location":"user-guide/java-sdk/#additional-resources","title":"Additional Resources","text":"<ul> <li>API Javadoc</li> <li>Apache Arrow Java Documentation</li> </ul>"}]}